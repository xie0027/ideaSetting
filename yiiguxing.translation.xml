<application>
  <component name="AppStorage">
    <histories>
      <item value="Replace the type specification in this constructor call with the diamond operator (&quot;&lt;&gt;&quot;)." />
      <item value="Replace the type specification in this constructor call with the diamond operator" />
      <item value="is Blank" />
      <item value="Rename this method name to match the regular expression '^[a-z][a-zA-Z0-9]*$'." />
      <item value="Invalid method declaration; return type required" />
      <item value="Reduce the total number of break and continue statements in this loop to use at most one. [+2 locations]" />
      <item value="String concatenation as argument to 'StringBuilder.append()' call" />
      <item value="A &quot;NullPointerException&quot; could be thrown; &quot;urlParam&quot; is nullable here. [+2 locations]" />
      <item value="Immediately return this expression instead of assigning it to the temporary variable &quot;strings&quot;." />
      <item value="Only variable expressions returning numbers or booleans are allowed in this context, any other datatypes are not trusted in the context of this expression, including Strings or any other object that could be rendered as a text literal. A typical case is HTML attributes for event handlers (e.g. &quot;onload&quot;), in which textual data from variables should better be output to &quot;data-*&quot; attributes and then read from the event handler. (template: &quot;list&quot; - line 200, col 45)" />
      <item value="Only variable expressions returning numbers or booleans are allowed in this context" />
      <item value="Private field 'listService' is never assigned" />
      <item value="Contents of collection 'skuLsInfos' are updated, but never queried" />
      <item value="exceptions: java.lang.IllegalAccessException, java.lang.reflect.InvocationTargetException" />
      <item value="Remove this useless assignment to local variable &quot;skuInfos&quot;." />
      <item value="Would you like to install a shell script formatter?" />
      <item value="Base Attr Value Mapper" />
      <item value="Variable 'skuInfo' initializer 'new SkuInfo()' is redundant" />
      <item value="Remove this useless assignment to local variable &quot;skuInfo&quot;." />
      <item value="Dependency" />
      <item value="Application context not configured for this file" />
      <item value="String concatenation '+=' in loop" />
      <item value="column cant resolved" />
      <item value="Unresolved variable isDefault" />
      <item value="Method expression is not of Function type" />
      <item value="The value assigned is never used Variable is assigned to itself" />
      <item value="VAGRANT" />
      <item value="value" />
      <item value="Deprecated HTML attribute" />
      <item value="invalid" />
      <item value="Add a private constructor to hide the implicit public one." />
      <item value="Remove this useless assignment to local variable &quot;myFileUploadUtil&quot;." />
      <item value="Use a StringBuilder instead." />
      <item value="Put single-quotes around '.' to use the faster &quot;lastIndexOf(char)&quot; method." />
      <item value="Remove this useless assignment to local variable &quot;trackerServer&quot;." />
      <item value="This block of commented-out lines of code should be removed." />
      <item value="Use a logger to log this exception." />
      <item value="Add at least one assertion to this test case" />
      <item value="Rename this local variable to match the regular expression" />
      <item value="Comparison spuSaleAttr.spuSaleAttrValueJson!='' may cause unexpected type coercion" />
      <item value="Selective" />
      <item value="SonarLint: Remove this useless assignment to local variable &quot;count&quot;." />
      <item value="Local variable 'spuList' is redundant" />
      <item value="Expression statement is not assignment or call" />
      <item value="Wrong number of type arguments: 1; required: 2" />
      <item value="Unresolved variable saleAttrValueName" />
      <item value="Add a &quot;method&quot; parameter to this &quot;@RequestMapping&quot; annotation." />
      <item value="SonarLint: Add a &quot;method&quot; parameter to this &quot;@RequestMapping&quot; annotation." />
      <item value="SonarLint is an IDE extension that helps you detect and fix quality issues as you write code. Like a spell checker, SonarLint squiggles flaws so they can be fixed before committing code. You can get it directly from the IntelliJ IDEA Plugin Repository, and it will then detect new bugs and quality issues as you code (Java, Kotlin, Ruby, JavaScript, PHP and Python). If your project is analyzed on SonarQube or on SonarCloud, SonarLint can connect to the server to retrieve the appropriate quality profiles and settings for that project. Java 8 is required to run SonarLint." />
      <item value="SonarLint is an IDE extension that helps you detect and fix quality issues as you write code. Like a spell checker, SonarLint squiggles flaws so they can be fixed before committing code. You can get it directly from the IntelliJ IDEA Plugin Repository, and it will then detect new bugs and quality issues as you code (Java, Kotlin, Ruby, JavaScript, PHP and Python).&#10;If your project is analyzed on SonarQube or on SonarCloud, SonarLint can connect to the server to retrieve the appropriate quality profiles and settings for that project. Java 8 is required to run SonarLint." />
    </histories>
    <option name="languageScores">
      <map>
        <entry key="CHINESE" value="9" />
        <entry key="ENGLISH" value="9" />
      </map>
    </option>
  </component>
</application>